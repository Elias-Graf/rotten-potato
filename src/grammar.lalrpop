use crate::ast::ParseError;
use crate::ast::atom::Atom;
use crate::ast::binary_operation::BinaryOperation;
use crate::ast::binary_operation::BinaryOperator;
use crate::ast::comparison_operation::ComparisonOperation;
use crate::ast::comparison_operation::ComparisonOperator;
use crate::ast::def_listen::DefListen;
use crate::ast::def_listen::DefListenArg;
use crate::ast::def_poll::DefPoll;
use crate::ast::def_poll::DefPollArg;
use crate::ast::def_var::DefVar;
use crate::ast::def_widget::DefWidget;
use crate::ast::def_widget::DefWidgetChild;
use crate::ast::def_widget::DefWidgetParam;
use crate::ast::def_window::DefWindow;
use crate::ast::def_window::DefWindowArg;
use crate::ast::def_window::DefWindowArgValue;
use crate::ast::def_window::DefWindowContent;
use crate::ast::expr::PrimitiveExpr;
use crate::ast::function_call::FunctionCall;
use crate::ast::include::Include;
use crate::ast::literal::Literal;
use crate::ast::literal::LiteralArg;
use crate::ast::symbol::Symbol;
use crate::ast::ternary_operation::TernaryOperation;
use crate::ast::top_level_expr::TopLevelExpr;
use crate::ast::unary_operation::UnaryOperation;
use crate::ast::widget_call::WidgetCall;
use crate::ast::widget_call::WidgetCallArg;
use crate::ast::widget_call::WidgetCallChild;
use crate::lexer::LexicalError;
use crate::lexer::tok::Tok;
use crate::spanned::Spanned;

grammar<'inp, 'err>(errors: &'err mut Vec<ParseError>);

pub TopLevel: Vec<Spanned<TopLevelExpr>> = TopLevelExpr*;

pub TopLevelExpr: Spanned<TopLevelExpr> = {
    DefListen,
    DefPoll,
    DefVar,
    DefWidget,
    DefWindow,
    Include,
    Literal,
    ! => {
        match <>.error {
            lalrpop_util::ParseError::InvalidToken { .. } => panic!("invalid token"),
            lalrpop_util::ParseError::UnrecognizedEof { .. } => panic!("unrecognized eof"),
            lalrpop_util::ParseError::UnrecognizedToken { token, expected } => {
                let (l, _, r) = token;
                errors.push(ParseError::UnexpectedToken {
                    err_span: (l, r - l).into(),
                });
                (l, TopLevelExpr::Err, r).into()
            },
            lalrpop_util::ParseError::ExtraToken { .. } => panic!("extra token"),
            lalrpop_util::ParseError::User { .. } => panic!("user"),
        }
    }
}

pub DefListen: Spanned<TopLevelExpr> = {
    <l:@L>
    "("
    <l_kwd:@L>
    "deflisten"
    <r_kwd:@R>
    <name:Symbol?>
    <args:DefListenArg*>
    <l_script:@L>
    <script:"literalString"?>
    <r_script:@R>
    ")"
    <r:@R>
    => {
        let Some(name) = name else {
            errors.push(ParseError::ExpectedDefListenName { err_span: (l, r).into() });
            return (l, TopLevelExpr::Err, r).into();
        };
        let Some(script) = script else {
            errors.push(ParseError::ExpectedDefListenScript { err_span: (l, r).into() });
            return (l, TopLevelExpr::Err, r).into();
        };

        (
            l,
            DefListen::new(
                (l_kwd, (), r_kwd),
                name,
                args,
                (l_script, script.to_owned(), r_script)
            ).into(),
            r
        ).into()
    },
};

pub DefListenArg: DefListenArg =
    ":" <name:Symbol> <value:Atom> => DefListenArg::new(name, value);

pub DefPoll: Spanned<TopLevelExpr> = {
    <l:@L>
    "("
    <l_kwd:@L>
    "defpoll"
    <r_kwd:@R>
    <name:Symbol?>
    <args:DefPollArg*>
    <l_script:@L>
    <script:"literalString"?>
    <r_script:@R>
    ")"
    <r:@R>
    => {
        let Some(name) = name else {
            errors.push(ParseError::ExpectedDefPollName {
                err_span: (l, r).into(),
            });
            return (l, TopLevelExpr::Err, r).into();
        };
        let Some(script) = script else {
            errors.push(ParseError::ExpectedDefPollScript {
                err_span: (l, r).into(),
            });
            return (l, TopLevelExpr::Err, r).into();
        };

        (
            l,
            DefPoll::new(
                (l_kwd, (), r_kwd),
                name,
                args,
                (l_script, script.into(),
                r_script),
            ).into(),
            r
        ).into()
    },
};

pub DefPollArg: DefPollArg =
    ":" <name:Symbol> <value:Atom> => DefPollArg::new(name, value);

pub DefVar: Spanned<TopLevelExpr> = {
    <l:@L> "(" <l_kwd:@L> "defvar" <r_kwd:@R> <name:Symbol?> <value:Atom?> ")" <r:@R> => {
        let Some(name) = name else {
            errors.push(ParseError::ExpectedDefVarName {
                err_span: (l, r).into(),
            });
            return (l, TopLevelExpr::Err, r).into();
        };
        let Some(value) = value else {
            errors.push(ParseError::ExpectedDefVarValue {
                err_span: (l, r).into(),
            });
            return (l, TopLevelExpr::Err, r).into();
        };

        (
            l,
            DefVar::new(
                (l_kwd, (), r_kwd),
                name,
                value.map(Into::into)
            ).into(),
            r
        ).into()
    },
};

pub DefWidget: Spanned<TopLevelExpr> = {
    <l:@L> "(" "defwidget" <name:Symbol?> ")" <r:@R> => {
        let Some(_) = name else {
            errors.push(ParseError::ExpectedDefWidgetName { err_span: (l, r).into() });
            return (l, TopLevelExpr::Err, r).into();
        };

        errors.push(ParseError::ExpectedDefWidgetParams { err_span: (l, r).into() });
        (l, TopLevelExpr::Err, r).into()
    },
    <l:@L>
    "("
    <l_kwd:@L>
    "defwidget"
    <r_kwd:@R>
    <name:Symbol>
    "["
    <params:DefWidgetParam*>
    "]"
    <children:DefWidgetChild*>
    ")"
    <r:@R>
    => {
        (
            l,
            DefWidget::new(
                (l_kwd, (), r_kwd),
                name,
                params,
                children
            ).into(),
            r
        ).into()
    },
};

pub DefWidgetParam: DefWidgetParam = <o:"?"?> <n:Symbol> => DefWidgetParam::new(n, o.is_some());

pub DefWidgetChild: DefWidgetChild = WidgetCall => <>.into();

pub DefWindow: Spanned<TopLevelExpr> = {
    <l:@L>
    "("
    "defwindow"
    <args:DefWindowArgs>
    <content:DefWindowContentList>
    ")"
    <r:@R>
    => {
        errors.push(ParseError::ExpectedDefWindowName { err_span: (l, r).into() });
        (l, TopLevelExpr::Err, r).into()
    },
    <l:@L>
    "("
    <l_kwd:@L>
    "defwindow"
    <r_kwd:@R>
    <name:Symbol>
    <args:DefWindowArgs>
    <content:DefWindowContentList>
    ")"
    <r:@R>
    => (
        l,
        DefWindow::new(
            (l_kwd, r_kwd),
            name,
            args,
            content
        ).into(),
        r
    ).into(),
};

pub DefWindowArgs: Vec<DefWindowArg> = <DefWindowArg*>;

pub DefWindowArg: DefWindowArg =
    ":" <name:Symbol> <value:DefWindowArgValue> => DefWindowArg::new(name, value);

pub DefWindowArgValue: DefWindowArgValue = {
    Atom => <>.into(),
    WidgetCall => <>.into(),
};

pub DefWindowContentList: Vec<DefWindowContent> = <DefWindowContent*>;

pub DefWindowContent: DefWindowContent = {
    Atom => <>.into(),
    WidgetCall => <>.into(),
};

pub Include: Spanned<TopLevelExpr> = {
    <l:@L>
    "("
    <l_kwd:@L>
    "include"
    <r_kwd:@R>
    <l_path:@L>
    <path:"literalString"?>
    <r_path:@R>
    ")"
    <r:@R>
    => {
        let Some(path) = path else {
            errors.push(ParseError::ExpectedIncludePath { err_span: (l, r).into() });
            return (l, TopLevelExpr::Err, r).into();
        };

        (
            l,
            Include::new((l_kwd, r_kwd), (l_path, path.into(), r_path)).into(),
            r
        ).into()
    }
};

pub Literal: Spanned<TopLevelExpr> =
    <l:@L>
    "("
    <l_kwd:@L>
    "literal"
    <r_kwd:@R>
    <args:LiteralArg*>
    ")"
    <r:@R>
        => (
            l,
            Literal::new((l_kwd, r_kwd), args).into(),
            r
        ).into();

pub LiteralArg: LiteralArg = {
    ":" <name:Symbol> <l_val:@L> <value:"literalString"> <r_val:@R>
        => LiteralArg::new(name, Spanned::from((l_val, value.to_owned(), r_val))),
    ":" <name:Symbol> <value:Symbol> => LiteralArg::new(name, value),
};

pub WidgetCall: Spanned<WidgetCall> = {
    <l:@L>
    "("
    <name:Symbol>
    <args:WidgetCallArg*>
    <children:WidgetCallChild*>
    ")"
    <r:@R>
    => {
        (l, WidgetCall::new(name, args, children), r).into()
    },
};

pub WidgetCallArg: WidgetCallArg =
    ":" <name:Symbol> <value:Atom> => WidgetCallArg::new(name, value);

pub WidgetCallChild: WidgetCallChild = {
    Atom => <>.into(),
    WidgetCall => <>.into(),
};

pub TernaryOperation: PrimitiveExpr = {
    BinaryOperation => <>.1,
    <cmp:ComparisonOperation> "?" <lhs:TernaryOperation> ":" <rhs:TernaryOperation> => {
        TernaryOperation::new(cmp.1, lhs, rhs).into()
    },
};

pub BinaryOperation: Spanned<PrimitiveExpr> = {
    #[precedence(level="0")]
    ComparisonOperation,

    #[precedence(level="1")] #[assoc(side="left")]
    <l:@L> <lhs:BinaryOperation> "&&" <rhs:BinaryOperation> <r:@R> =>
        (l, BinaryOperation::new(lhs, BinaryOperator::And, rhs).into(), r).into(),
    #[precedence(level="2")] #[assoc(side="left")]
    <l:@L> <lhs:BinaryOperation> "||" <rhs:BinaryOperation> <r:@R> =>
        (l, BinaryOperation::new(lhs, BinaryOperator::Or, rhs).into(), r).into(),
};

pub ComparisonOperation: Spanned<PrimitiveExpr> = {
    #[precedence(level="0")]
    MathOperation,

    #[precedence(level="1")] #[assoc(side="left")]
    <l:@L> <lhs:ComparisonOperation> "!=" <rhs:ComparisonOperation> <r:@R> =>
        (l, ComparisonOperation::new(lhs, ComparisonOperator::Neq, rhs).into(), r).into(),
    <l:@L> <lhs:ComparisonOperation> "<" <rhs:ComparisonOperation> <r:@R> =>
        (l, ComparisonOperation::new(lhs, ComparisonOperator::Lt, rhs).into(), r).into(),
    <l:@L> <lhs:ComparisonOperation> "<=" <rhs:ComparisonOperation> <r:@R> =>
        (l, ComparisonOperation::new(lhs, ComparisonOperator::Lte, rhs).into(), r).into(),
    <l:@L> <lhs:ComparisonOperation> "==" <rhs:ComparisonOperation> <r:@R> =>
        (l, ComparisonOperation::new(lhs, ComparisonOperator::Eq, rhs).into(), r).into(),
    <l:@L> <lhs:ComparisonOperation> ">" <rhs:ComparisonOperation> <r:@R> =>
        (l, ComparisonOperation::new(lhs, ComparisonOperator::Gt, rhs).into(), r).into(),
    <l:@L> <lhs:ComparisonOperation> ">=" <rhs:ComparisonOperation> <r:@R> =>
        (l, ComparisonOperation::new(lhs, ComparisonOperator::Gte, rhs).into(), r).into(),
};

pub MathOperation: Spanned<PrimitiveExpr> = {
    #[precedence(level="0")]
    UnaryOperation,

    #[precedence(level="1")] #[assoc(side="left")]
    <l:@L> <lhs:MathOperation> "*" <rhs:MathOperation> <r:@R> =>
        (l, BinaryOperation::new(lhs, BinaryOperator::Mul, rhs).into(), r).into(),
    <l:@L> <lhs:MathOperation> "/" <rhs:MathOperation> <r:@R> =>
        (l, BinaryOperation::new(lhs, BinaryOperator::Div, rhs).into(), r).into(),
    <l:@L> <lhs:MathOperation> "%" <rhs:MathOperation> <r:@R> =>
        (l, BinaryOperation::new(lhs, BinaryOperator::Mod, rhs).into(), r).into(),
    #[precedence(level="2")] #[assoc(side="left")]
    <l:@L> <lhs:MathOperation> "+" <rhs:MathOperation> <r:@R> =>
        (l, BinaryOperation::new(lhs, BinaryOperator::Add, rhs).into(), r).into(),
    <l:@L> <lhs:MathOperation> "-" <rhs:MathOperation> <r:@R> =>
        (l, BinaryOperation::new(lhs, BinaryOperator::Sub, rhs).into(), r).into(),
};

pub UnaryOperation: Spanned<PrimitiveExpr> = {
    "!" <Atom> => (0, UnaryOperation::new_not(<>.1).into(), 0).into(),
    <l:@L> <a:Atom> <r:@R> => (l, a.1.into(), r).into(),
    FunctionCall,
};

pub Atom: Spanned<Atom> = {
    <l:@L> "false" <r:@R> => (l, false.into(), r).into(),
    <l:@L> "true" <r:@R> => (l, true.into(), r).into(),
    <l:@L> <v:"literalNumber"> <r:@R> => (l, Atom::new_number(v.to_owned()), r).into(),
    <l:@L> <v:"literalString"> <r:@R> => (l, Atom::StrLit(v.to_owned()), r).into(),
};

pub FunctionCall: Spanned<PrimitiveExpr> =
    <l:@L> <name:Symbol> "(" <args:CommaSeparated<TernaryOperation>> ")" <r:@R> =>
        (l, FunctionCall::new(name.1, args).into(), r).into();

pub Symbol: Spanned<Symbol> = <l:@L> <s:"literalSymbol"> <r:@R> => (l, Symbol::new(s), r).into();

CommaSeparated<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

extern {
    type Location = usize;
    type Error = LexicalError<'inp>;

    enum Tok<'inp> {
        "literalNumber" => Tok::LiteralNumber(<&'inp str>),
        "literalString" => Tok::LiteralString(<&'inp str>),
        "literalSymbol" => Tok::LiteralSymbol(<&'inp str>),
        "include" => Tok::KeywordInclude,
        "literal" => Tok::KeywordLiteral,
        "deflisten" => Tok::KeywordDefListen,
        "defpoll" => Tok::KeywordDefPoll,
        "defvar" => Tok::KeywordDefVar,
        "defwidget" => Tok::KeywordDefWidget,
        "defwindow" => Tok::KeywordDefWindow,
        "false" => Tok::KeywordFalse,
        "true" => Tok::KeywordTrue,
        "(" => Tok::DelimiterLeftParen,
        ")" => Tok::DelimiterRightParen,
        "[" => Tok::DelimiterLeftBracket,
        "]" => Tok::DelimiterRightBracket,
        "," => Tok::DelimiterComma,
        "*" => Tok::OperatorMathMultiplication,
        "/" => Tok::OperatorMathDivision,
        "%" => Tok::OperatorMathModulo,
        "+" => Tok::OperatorMathAddition,
        "-" => Tok::OperatorMathSubtraction,
        "||" => Tok::OperatorLogicalOr,
        "&&" => Tok::OperatorLogicalAnd,
        "!" => Tok::OperatorLogicalNot,
        "==" => Tok::OperatorComparisonEqual,
        "!=" => Tok::OperatorComparisonNotEqual,
        "<=" => Tok::OperatorComparisonLessThanOrEquals,
        ">=" => Tok::OperatorComparisonGreaterThanOrEquals,
        ">" => Tok::OperatorComparisonGreaterThan,
        "<" => Tok::OperatorComparisonLessThan,
        "?" => Tok::PunctuationQuestionMark,
        ":" => Tok::PunctuationColon,
    }
}

// vim: ft=rust
